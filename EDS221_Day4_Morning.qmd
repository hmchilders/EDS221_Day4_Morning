---
title: "Morning Activities, Day 4"
author: "Heather"
format: html
editor: visual

execute: 
  warning: false
  echo: true
---

## Code Warm-up

```{r}
quarter_splits <- c(1.0, 1.1,1.2,1.1,1.4,1.5,1.6,1.4)

for (i in seq(1:(length(quarter_splits)-1)))
     {
  sum <- quarter_splits[i]+quarter_splits[i+1]
  print(sum)
}
```

## Function Documentation

What are the different pieces in the documentation?

-   **Description:** gives an overview of what the function does

-   **Usage:** shows general usage and default behaviors

-   **Arguments:** the arguments...

-   **Details:** any other details...

-   **Value:** information about the output returned

-   **Examples:** selected examples (but also...Google it)

## Writing Functions:

Function 1: Double It

```{r}
double_it <- function(val){
  return(val*2)
}

double_it(3)
double_it(c(10,5,7))

```

Function 2: Exclaim age

```{r}
exclaim_age <- function(age){
  exclaim <- paste("I am", age, "years old!")
  print(exclaim)
}

exclaim_age(10)
```

Example 3:

```{r}
restaurant_name <- function(animal,food){
  print(paste("The cool",animal,food,"place"))
}

restaurant_name("hawk","pizza")

```

example4: Given a temperature in F deg, write a function that converts it to C.

```{r}
F_to_C <- function(deg_F){
  (deg_F - 32)*(5/9)
}

F_to_C(32)
F_to_C(50)
F_to_C(85)
```

Example 5: Create a function given age and home town returns "i am \_\_\_ years old and I'm from \_\_\_"

```{r}
biography <- function(age, home_town){
  return(paste("I am", age, "years old and I'm from", home_town))
}

biography(age = 24, home_town = "Santa Barbara")
```

### Print vs. Return

What's the difference between `print()` and `return()?`. The `print()` function just makes something visible to us. It does not get stored for later use. If we want an output to be stored for use, we use `return()`.

## Functions with Conditionals

```{r}
calculate_animal_age <- function(animal, age_human_years){
  if (animal == "dog"){
    print(age_human_years*7)
  } else if (animal == "goat") {
    print(age_human_years*4.7)
  } else {
    print("I don't know them")
  }
}

calculate_animal_age(animal = "dog", age_human_years = 7)
calculate_animal_age(animal = "goat", age_human_years = 4)
calculate_animal_age("cow", 8)
```

Write a function that given the temperature in Kelvin returns celcius if a user selects "metric" or fehrenheit if user selects "english"

```{r}
convert_temperature <- function(temp_Kelvin, unit_type){
  if (unit_type == "metric"){
    print(temp_Kelvin-273.15)
  } else if (unit_type == "english"){
    Temp <- ((temp_Kelvin-273.15)*(9/5)+(32))
    print(Temp)
  }
}

convert_temperature(312, "metric")
convert_temperature(312, "english")
```

## Population growth for loops

```{r}
library(tidyverse)
```

```{r}
logistic_growth <- function(K, N0,r,t) {
  pop_est <- (K)/(1+(((K-N0)/N0)*(exp(-r*t))))
  return(pop_est)
}

time_vec <- seq(from = 0, to = 35, by = 0.1)
growth_rt_vec <- seq(from = 0.2, to = 0.4, by = 0.01) 

out_matrix <- matrix(nrow= length(time_vec), ncol = length(growth_rt_vec))
                     # , row.names(time_vec), colnames(growth_rt_vec)

for (i in seq_along(growth_rt_vec)){
  for (j in seq_along(time_vec)){
    pop <- logistic_growth(300,20,growth_rt_vec[i],time_vec[j])
    out_matrix[j,i] <- pop
  }
}
View(out_matrix)

```

```{r}
ggplot(out_matrix, aes(x=time_vec, y = growth_rt_vec))+
  geom_line()
```

## 
